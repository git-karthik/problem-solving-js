const solve = (strArray) => {
  let _possiblePrefix = findFirstPrefixMatch(strArray[0], strArray[1]);
  let _longestPrefix = longestPossiblePrefix(_possiblePrefix, strArray);

  return _longestPrefix;
};

/**
 * Picks up the first two elements from the input array and returns the matching prefix between them.
 * @param {The first string in the input array} firstStr
 * @param {The second string in the input array} secondStr
 * @returns the matching prefix for the first two elements in the input array
 */
const findFirstPrefixMatch = (firstStr, secondStr) => {
  let firstStrChars = firstStr.split("");
  let secondStrChars = secondStr.split("");
  let prefixBuffer = "";

  for (let i = 0; i < firstStrChars.length; i++) {
    if (i < secondStrChars.length) {
      if (firstStrChars[i] == secondStrChars[i]) {
        prefixBuffer = prefixBuffer.concat(firstStrChars[i]);
      } else {
        return prefixBuffer;
      }
    }
  }

  return prefixBuffer;
};

/**
 *
 * @param {The possible prefix generated by the method findFirstPrefixMatch} possiblePrefix
 * @param {The input array} strArray
 * @returns the longest possible prefix for the elements in the given array
 */
const longestPossiblePrefix = (possiblePrefix, strArray) => {
  if (!possiblePrefix) {
    console.log("No matching prefix found");
  } else {
    let prfx = possiblePrefix;
    const containsPrefix = (value) => value.startsWith(prfx);
    //Check if every element in the array contains the prefix provided
    if (strArray.every(containsPrefix)) {
      console.log(possiblePrefix);
      return possiblePrefix;
    } else {
      //Otherwise, recursively call the method by striping the last element from the prefix until the prefix matches
      //all the elements
      possiblePrefix = longestPossiblePrefix(
        possiblePrefix.substring(0, possiblePrefix.length - 1),
        strArray
      );
    }
  }
  console.log(possiblePrefix);

  return possiblePrefix;
};
solve(["test", "testing", "tsar"]);
